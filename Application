<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Voice Line Recorder</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: white;
        }
        
        .container {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
            border: 1px solid rgba(255, 255, 255, 0.18);
        }
        
        h1 {
            text-align: center;
            margin-bottom: 30px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }
        
        .setup-section {
            margin-bottom: 30px;
            padding: 20px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
        }
        
        .input-group {
            margin-bottom: 15px;
        }
        
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        
        input[type="text"] {
            width: 100%;
            padding: 10px;
            border: none;
            border-radius: 5px;
            background: rgba(255, 255, 255, 0.9);
            color: #333;
            font-size: 16px;
        }
        
        .controls {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin-top: 20px;
        }
        
        button {
            padding: 15px 20px;
            border: none;
            border-radius: 10px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        
        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
        }
        
        button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }
        
        .record-btn {
            background: #ff4757;
            color: white;
        }
        
        .record-btn.recording {
            background: #ff3838;
            animation: pulse 1s infinite;
        }
        
        .stop-btn {
            background: #747d8c;
            color: white;
        }
        
        .save-btn {
            background: #2ed573;
            color: white;
        }
        
        .delete-btn {
            background: #ffa502;
            color: white;
        }
        
        .google-drive-btn {
            background: #4285f4;
            color: white;
            grid-column: 1 / -1;
            margin-bottom: 10px;
        }
        
        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.7; }
            100% { opacity: 1; }
        }
        
        .status {
            text-align: center;
            margin: 20px 0;
            padding: 10px;
            border-radius: 5px;
            background: rgba(255, 255, 255, 0.1);
        }
        
        .timer {
            font-size: 24px;
            font-weight: bold;
            text-align: center;
            margin: 15px 0;
            font-family: 'Courier New', monospace;
        }
        
        .file-counter {
            text-align: center;
            font-size: 18px;
            margin: 10px 0;
            font-weight: bold;
        }
        
        .hidden {
            display: none;
        }
        
        .audio-preview {
            width: 100%;
            margin: 15px 0;
            border-radius: 5px;
        }
        
        .auth-status {
            text-align: center;
            padding: 10px;
            margin: 10px 0;
            border-radius: 5px;
            background: rgba(255, 255, 255, 0.1);
        }
        
        .keyboard-shortcuts {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            padding: 15px;
            margin-top: 20px;
            font-size: 14px;
        }
        
        .shortcut-item {
            display: flex;
            justify-content: space-between;
            margin: 5px 0;
        }
        
        .key {
            background: rgba(255, 255, 255, 0.2);
            padding: 2px 8px;
            border-radius: 3px;
            font-family: monospace;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üéôÔ∏è Voice Line Recorder</h1>
        
        <div class="setup-section">
            <div class="input-group">
                <label for="filePrefix">File Name Prefix:</label>
                <input type="text" id="filePrefix" value="File" placeholder="e.g., Talk, Recording, Line">
            </div>
            
            <div class="input-group">
                <label for="driveFolder">Google Drive Folder ID (optional):</label>
                <input type="text" id="driveFolder" placeholder="Leave empty to save to root folder">
            </div>
            
            <div class="auth-status" id="authStatus">
                Google Drive: Not connected
            </div>
            
            <button class="google-drive-btn" id="authBtn" onclick="handleGoogleAuth()">
                Connect to Google Drive
            </button>
        </div>
        
        <div class="file-counter" id="fileCounter">
            Next file: <span id="nextFileName">File 1</span>
        </div>
        
        <div class="timer" id="timer">00:00</div>
        
        <div class="status" id="status">Ready to record</div>
        
        <audio id="audioPreview" class="audio-preview hidden" controls></audio>
        
        <div class="controls">
            <button class="record-btn" id="recordBtn" onclick="startRecording()">
                üî¥ Record <span class="key">A</span>
            </button>
            <button class="stop-btn" id="stopBtn" onclick="stopRecording()" disabled>
                ‚èπÔ∏è Stop <span class="key">S</span>
            </button>
            <button class="save-btn" id="saveBtn" onclick="saveRecording()" disabled>
                üíæ Save to Drive <span class="key">D</span>
            </button>
            <button class="delete-btn" id="deleteBtn" onclick="deleteRecording()" disabled>
                üóëÔ∏è Delete & Redo <span class="key">F</span>
            </button>
        </div>
        
        <div class="keyboard-shortcuts">
            <h3 style="margin-top: 0; text-align: center;">‚å®Ô∏è Keyboard Shortcuts</h3>
            <div class="shortcut-item">
                <span>Start Recording:</span>
                <span class="key">A</span>
            </div>
            <div class="shortcut-item">
                <span>Stop Recording:</span>
                <span class="key">S</span>
            </div>
            <div class="shortcut-item">
                <span>Save to Drive:</span>
                <span class="key">D</span>
            </div>
            <div class="shortcut-item">
                <span>Delete & Redo:</span>
                <span class="key">F</span>
            </div>
            <div class="shortcut-item">
                <span>Connect/Disconnect Drive:</span>
                <span class="key">G</span>
            </div>
        </div>
    </div>

    <script src="https://apis.google.com/js/api.js"></script>
    <script>
        // Global variables
        let mediaRecorder;
        let audioChunks = [];
        let recordingBlob = null;
        let isRecording = false;
        let startTime;
        let timerInterval;
        let fileCounter = 1;
        let gapi_loaded = false;
        let isAuthenticated = false;

        // Google Drive API configuration
        const CLIENT_ID = 'YOUR_GOOGLE_CLIENT_ID'; // You'll need to replace this
        const API_KEY = 'YOUR_GOOGLE_API_KEY'; // You'll need to replace this
        const DISCOVERY_DOC = 'https://www.googleapis.com/discovery/v1/apis/drive/v3/rest';
        const SCOPES = 'https://www.googleapis.com/auth/drive.file';

        // Initialize the app
        window.onload = function() {
            updateFileName();
            updateStatus('Ready to record');
            
            // Load Google API
            if (typeof gapi !== 'undefined') {
                gapi.load('auth2', initializeGapi);
            } else {
                updateStatus('Google Drive integration not available');
            }
            
            // Add keyboard event listeners
            setupKeyboardShortcuts();
        };

        function setupKeyboardShortcuts() {
            document.addEventListener('keydown', function(event) {
                // Only trigger if not typing in an input field
                if (event.target.tagName === 'INPUT') {
                    return;
                }
                
                // Prevent default behavior for our shortcuts
                const key = event.key.toLowerCase();
                
                switch(key) {
                    case 'a':
                        event.preventDefault();
                        if (!document.getElementById('recordBtn').disabled) {
                            startRecording();
                        }
                        break;
                    case 's':
                        event.preventDefault();
                        if (!document.getElementById('stopBtn').disabled) {
                            stopRecording();
                        }
                        break;
                    case 'd':
                        event.preventDefault();
                        if (!document.getElementById('saveBtn').disabled) {
                            saveRecording();
                        }
                        break;
                    case 'f':
                        event.preventDefault();
                        if (!document.getElementById('deleteBtn').disabled) {
                            deleteRecording();
                        }
                        break;
                    case 'g':
                        event.preventDefault();
                        handleGoogleAuth();
                        break;
                }
            });
            
            // Visual feedback for key presses
            document.addEventListener('keydown', function(event) {
                if (event.target.tagName === 'INPUT') return;
                
                const key = event.key.toLowerCase();
                let button = null;
                
                switch(key) {
                    case 'a': button = document.getElementById('recordBtn'); break;
                    case 's': button = document.getElementById('stopBtn'); break;
                    case 'd': button = document.getElementById('saveBtn'); break;
                    case 'f': button = document.getElementById('deleteBtn'); break;
                    case 'g': button = document.getElementById('authBtn'); break;
                }
                
                if (button && !button.disabled) {
                    button.style.transform = 'translateY(0px)';
                    button.style.boxShadow = '0 2px 8px rgba(0,0,0,0.3)';
                }
            });
            
            document.addEventListener('keyup', function(event) {
                if (event.target.tagName === 'INPUT') return;
                
                const key = event.key.toLowerCase();
                let button = null;
                
                switch(key) {
                    case 'a': button = document.getElementById('recordBtn'); break;
                    case 's': button = document.getElementById('stopBtn'); break;
                    case 'd': button = document.getElementById('saveBtn'); break;
                    case 'f': button = document.getElementById('deleteBtn'); break;
                    case 'g': button = document.getElementById('authBtn'); break;
                }
                
                if (button) {
                    button.style.transform = '';
                    button.style.boxShadow = '';
                }
            });
        }

        async function initializeGapi() {
            try {
                await gapi.load('client:auth2', async () => {
                    await gapi.client.init({
                        apiKey: API_KEY,
                        clientId: CLIENT_ID,
                        discoveryDocs: [DISCOVERY_DOC],
                        scope: SCOPES
                    });
                    
                    const authInstance = gapi.auth2.getAuthInstance();
                    isAuthenticated = authInstance.isSignedIn.get();
                    updateAuthStatus();
                    gapi_loaded = true;
                });
            } catch (error) {
                console.log('Google API initialization failed:', error);
                updateStatus('Google Drive setup required - see console for details');
            }
        }

        function updateAuthStatus() {
            const authStatus = document.getElementById('authStatus');
            const authBtn = document.getElementById('authBtn');
            
            if (isAuthenticated) {
                authStatus.textContent = 'Google Drive: Connected ‚úÖ';
                authBtn.textContent = 'Disconnect from Google Drive';
                authStatus.style.background = 'rgba(46, 213, 115, 0.3)';
            } else {
                authStatus.textContent = 'Google Drive: Not connected';
                authBtn.textContent = 'Connect to Google Drive';
                authStatus.style.background = 'rgba(255, 71, 87, 0.3)';
            }
        }

        async function handleGoogleAuth() {
            if (!gapi_loaded) {
                alert('Google API not loaded. Please check your internet connection and refresh the page.');
                return;
            }

            const authInstance = gapi.auth2.getAuthInstance();
            
            if (isAuthenticated) {
                await authInstance.signOut();
                isAuthenticated = false;
            } else {
                try {
                    await authInstance.signIn();
                    isAuthenticated = true;
                } catch (error) {
                    alert('Failed to authenticate with Google Drive');
                    console.error(error);
                }
            }
            updateAuthStatus();
        }

        function updateFileName() {
            const prefix = document.getElementById('filePrefix').value || 'File';
            const nextFileName = `${prefix} ${fileCounter}`;
            document.getElementById('nextFileName').textContent = nextFileName;
        }

        function updateStatus(message) {
            document.getElementById('status').textContent = message;
        }

        function updateTimer() {
            if (!startTime) return;
            
            const elapsed = Date.now() - startTime;
            const minutes = Math.floor(elapsed / 60000);
            const seconds = Math.floor((elapsed % 60000) / 1000);
            
            document.getElementById('timer').textContent = 
                `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        }

        async function startRecording() {
            try {
                const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
                
                mediaRecorder = new MediaRecorder(stream);
                audioChunks = [];
                
                mediaRecorder.ondataavailable = event => {
                    audioChunks.push(event.data);
                };
                
                mediaRecorder.onstop = () => {
                    recordingBlob = new Blob(audioChunks, { type: 'audio/wav' });
                    
                    // Create audio preview
                    const audioPreview = document.getElementById('audioPreview');
                    audioPreview.src = URL.createObjectURL(recordingBlob);
                    audioPreview.classList.remove('hidden');
                    
                    // Enable save and delete buttons
                    document.getElementById('saveBtn').disabled = false;
                    document.getElementById('deleteBtn').disabled = false;
                    
                    updateStatus('Recording complete - Ready to save or delete');
                };
                
                mediaRecorder.start();
                isRecording = true;
                startTime = Date.now();
                
                // Update UI
                document.getElementById('recordBtn').disabled = true;
                document.getElementById('recordBtn').classList.add('recording');
                document.getElementById('stopBtn').disabled = false;
                
                updateStatus('Recording in progress...');
                
                // Start timer
                timerInterval = setInterval(updateTimer, 1000);
                
            } catch (error) {
                alert('Could not access microphone. Please allow microphone permissions.');
                console.error('Error accessing microphone:', error);
            }
        }

        function stopRecording() {
            if (mediaRecorder && isRecording) {
                mediaRecorder.stop();
                isRecording = false;
                
                // Stop all tracks
                mediaRecorder.stream.getTracks().forEach(track => track.stop());
                
                // Update UI
                document.getElementById('recordBtn').disabled = false;
                document.getElementById('recordBtn').classList.remove('recording');
                document.getElementById('stopBtn').disabled = true;
                
                // Stop timer
                clearInterval(timerInterval);
            }
        }

        async function saveRecording() {
            if (!recordingBlob) {
                alert('No recording to save');
                return;
            }

            const prefix = document.getElementById('filePrefix').value || 'File';
            const fileName = `${prefix} ${fileCounter}.wav`;
            
            if (isAuthenticated && gapi_loaded) {
                try {
                    updateStatus('Uploading to Google Drive...');
                    await uploadToGoogleDrive(recordingBlob, fileName);
                    updateStatus(`Successfully saved: ${fileName}`);
                } catch (error) {
                    console.error('Upload failed:', error);
                    updateStatus('Upload failed - downloading locally instead');
                    downloadLocally(recordingBlob, fileName);
                }
            } else {
                // Download locally if not authenticated
                downloadLocally(recordingBlob, fileName);
                updateStatus(`Downloaded locally: ${fileName}`);
            }
            
            // Increment counter and reset
            fileCounter++;
            updateFileName();
            resetRecording();
        }

        async function uploadToGoogleDrive(blob, fileName) {
            const folderId = document.getElementById('driveFolder').value.trim();
            
            const metadata = {
                name: fileName,
                parents: folderId ? [folderId] : undefined
            };

            const form = new FormData();
            form.append('metadata', new Blob([JSON.stringify(metadata)], { type: 'application/json' }));
            form.append('file', blob);

            const response = await fetch('https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart', {
                method: 'POST',
                headers: new Headers({
                    'Authorization': `Bearer ${gapi.auth2.getAuthInstance().currentUser.get().getAuthResponse().access_token}`
                }),
                body: form
            });

            if (!response.ok) {
                throw new Error(`Upload failed: ${response.statusText}`);
            }

            return response.json();
        }

        function downloadLocally(blob, fileName) {
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = fileName;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }

        function deleteRecording() {
            if (recordingBlob) {
                recordingBlob = null;
                
                // Reset UI
                resetRecording();
                updateStatus('Recording deleted - Ready for new recording');
            }
        }

        function resetRecording() {
            // Hide audio preview
            const audioPreview = document.getElementById('audioPreview');
            audioPreview.classList.add('hidden');
            audioPreview.src = '';
            
            // Disable save and delete buttons
            document.getElementById('saveBtn').disabled = true;
            document.getElementById('deleteBtn').disabled = true;
            
            // Reset timer
            document.getElementById('timer').textContent = '00:00';
            
            // Clear recording data
            audioChunks = [];
            recordingBlob = null;
        }

        // Update filename when prefix changes
        document.getElementById('filePrefix').addEventListener('input', updateFileName);
    </script>
</body>
</html>
